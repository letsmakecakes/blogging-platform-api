openapi: 3.0.3
info:
  title: Blog API
  description: API for managing blog posts.
  version: 1.0.0
  contact:
    name: Adwaith Rajeev
    email: adwaith@example.com

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /blogs:
    get:
      summary: Retrieve all blogs
      description: Fetch all blogs or filter blogs using an optional search term.
      parameters:
        - name: term
          in: query
          description: Search term to filter blogs.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of blogs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
        '500':
          description: Failed to retrieve blogs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new blog
      description: Add a new blog post to the platform.
      requestBody:
        description: Blog data to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        '201':
          description: Blog created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '400':
          description: Invalid request payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to create blog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /blogs/{id}:
    get:
      summary: Retrieve a blog
      description: Fetch a specific blog by its ID.
      parameters:
        - name: id
          in: path
          description: Blog ID.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Blog retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '400':
          description: Invalid blog ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Blog not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to retrieve blog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a blog
      description: Update an existing blog post by its ID.
      parameters:
        - name: id
          in: path
          description: Blog ID.
          required: true
          schema:
            type: integer
      requestBody:
        description: Blog data to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        '200':
          description: Blog updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '400':
          description: Invalid blog ID or request payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Blog not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to update blog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a blog
      description: Delete a specific blog by its ID.
      parameters:
        - name: id
          in: path
          description: Blog ID.
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Blog deleted successfully.
        '400':
          description: Invalid blog ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Blog not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to delete blog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Blog:
      type: object
      properties:
        id:
          type: integer
          description: Blog ID.
        title:
          type: string
          description: Blog title.
        content:
          type: string
          description: Blog content.
        author:
          type: string
          description: Blog author.
        createdAt:
          type: string
          format: date-time
          description: Timestamp of blog creation.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp of last update.

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message.
